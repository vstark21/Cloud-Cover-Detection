---
SEED: 156 # 2022, 42, 444, 156
VERBOSE: 1
DEBUG: False

NAME: 'CCD'

MODEL: 'Unet' # 'CloudNetp', 'Unet', 'SwinSegmenter', 'SeMask', 'SegNet', 'FPN' or 'CheapLab'
NUM_WORKERS: 2
MODEL_PARAMS:
    CloudNetp:
        n_channels: 4
        n_classes: 1
        inception_depth: 6
        residual: True
    SwinSegmenter:
        cfg:
            backbone:
                type: 'SwinTransformer'
                img_size: 512
                in_chans: 4
                embed_dim: 96
                depths: [2, 2, 18, 2]
                num_heads: [3, 6, 12, 24]
                window_size: 7
                mlp_ratio: 4.
                qkv_bias: True
                qk_scale: null
                drop_rate: 0.
                attn_drop_rate: 0.
                drop_path_rate: 0.3
                ape: False
                patch_norm: True
                out_indices: [0, 1, 2, 3]
                use_checkpoint: False
            decode_head:
                type: 'UPerHead'
                in_channels: [96, 192, 384, 768]
                in_index: [0, 1, 2, 3]
                pool_scales: [1, 2, 3, 6]
                channels: 512
                dropout_ratio: 0.1
                num_classes: 512
                norm_cfg: 
                    type: 'BN2d'
                    requires_grad: True
                align_corners: False
            auxiliary_head:
                type: 'FCNHead'
                in_channels: 384
                in_index: 2
                channels: 256
                num_convs: 1
                concat_input: False
                dropout_ratio: 0.1
                num_classes: 512
                norm_cfg:  
                    type: 'BN2d'
                    requires_grad: True
                align_corners: False
    SeMask:
        cfg:
            backbone:
                type: 'SeMaskSwinTransformer'
                img_size: 512
                in_chans: 4
                embed_dim: 96
                depths: [2, 2, 18, 2]
                num_heads: [3, 6, 12, 24]
                window_size: 7
                num_cls: 512
                sem_window_size: 7
                num_sem_blocks: [1, 1, 1, 1]
                mlp_ratio: 4.
                qkv_bias: True
                qk_scale: null
                drop_rate: 0.
                attn_drop_rate: 0.
                drop_path_rate: 0.3
                ape: False
                patch_norm: True
                out_indices: [0, 1, 2, 3]
                use_checkpoint: False
            decode_head:
                type: 'BranchFPNHead'
                in_channels: [96, 192, 384, 768]
                in_index: [0, 1, 2, 3]
                feature_strides: [4, 8, 16, 32]
                channels: 256
                dropout_ratio: 0.1
                num_classes: 512
                norm_cfg: 
                    type: 'BN2d'
                    requires_grad: True
                align_corners: False
    SegNet:
        in_channels: 4
        out_channels: 1
        bn_momentum: 0.5
    Unet:
        cfg:
            backbone:
                type: 'EfficientNet' # ResNet or EfficientNet
                variant: 'efficientnet-b7' # resnet* or efficientnet-b*
                n_channels: 4
            head:
                type: 'UnetDecodeHead'
                n_classes: 1
                dropout: 0.2
                out_channels: [256, 128, 64, 32, 16]
    FPN:
        cfg:
            backbone:
                type: 'EfficientNet'
                variant: 'efficientnet-b7'
                n_channels: 4
            head:
                type: 'FPNDecodeHead'
                num_classes: 1       
    CheapLab:
        num_channels: 4
        out_channels: 1

# Data
DATA_PATH: "/kaggle/input/ccd-data/ccd_data/"
BAD_CHIPS_FILE: "/kaggle/working/bad_chips.json"
USE_BANDS: ['B02', 'B03', 'B04', 'B08'] # ['AOT', 'B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B09', 'B11', 'B12', 'B8A', 'SCL', 'WVP']
DATA_MEAN: 
    AOT: 180.1299
    B01: 2960.6534
    B02: 2848.0641
    B03: 2839.0871
    B04: 2741.2891
    B05: 3092.1515
    B06: 3498.3167
    B07: 3667.7743
    B08: 3657.9092
    B09: 5407.6344
    B11: 2897.9083
    B12: 2251.9176
    B8A: 3763.3122
    SCL: 6.7838
    WVP: 2499.6553
DATA_STD:
    AOT: 83.1507
    B01: 3361.4101
    B02: 3156.9267
    B03: 2899.28
    B04: 2789.9614
    B05: 2818.9582
    B06: 2511.3989
    B07: 2420.1918
    B08: 2424.1892
    B09: 4388.4378
    B11: 1761.3575
    B12: 1567.6521
    B8A: 2352.8046
    SCL: 2.2471
    WVP: 1145.1936
    
# Loss
LOSS_CFG:
    losses:
        bce_loss: "BceLoss"
        dice_loss: "DiceLoss"
        jacc_loss: "JaccardLoss"
        fjacc_loss: "FilteredJaccardLoss"
    loss_weights: 
        bce_loss: 0.
        dice_loss: 0.
        jacc_loss: 1.
        fjacc_loss: 0.
    out_weights:
        out: 1.
        aux_out: 0.4

# Training
OPTIMIZER_CFG: 
    type: 'AdamW' # Should be one of the algorithms in https://pytorch.org/docs/stable/optim.html
    lr: 5.0e-4
    betas: [0.9, 0.999]
    weight_decay: 0.01
TRAIN_BATCH_SIZE: 4
EPOCHS: 64
AMP: True
TRAIN_ITERS: 1024
N_ACCUMULATE: 16
MIN_LEARNING_RATE: 1.0e-5
SCHEDULER: "ReduceLROnPlateau" # Should be one of the scheduler in https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
SCHEDULER_PARAMS:
    mode: "min"
    patience: 2
    factor: 0.5

# Validating
VAL_BATCH_SIZE: 4

# Finetuning
FT_MODELS_DIR: "outputs/"
FT_MODELS:
    CCD_20:
        MODEL: 'Unet'
        MODEL_PARAMS:
            cfg:
                backbone:
                    type: 'ResNet' # ResNet or EfficientNet
                    variant: 'resnet50' # resnet* or efficientnet-b*
                    n_channels: 4
                head:
                    type: 'UnetDecodeHead'
                    n_classes: 1
                    dropout: 0.2
                    out_channels: [256, 128, 64, 32, 16]
    CCD_21:
        MODEL: 'Unet'
        MODEL_PARAMS:
            cfg:
                backbone:
                    type: 'EfficientNet' # ResNet or EfficientNet
                    variant: 'efficientnet-b1' # resnet* or efficientnet-b*
                    n_channels: 4
                head:
                    type: 'UnetDecodeHead'
                    n_classes: 1
                    dropout: 0.2
                    out_channels: [256, 128, 64, 32, 16]
    CCD_22:
        MODEL: 'Unet'
        MODEL_PARAMS:
            cfg:
                backbone:
                    type: 'EfficientNet' # ResNet or EfficientNet
                    variant: 'efficientnet-b5' # resnet* or efficientnet-b*
                    n_channels: 4
                head:
                    type: 'UnetDecodeHead'
                    n_classes: 1
                    dropout: 0.2
                    out_channels: [256, 128, 64, 32, 16]
    CCD_23:
        MODEL: 'FPN'
        MODEL_PARAMS:
            cfg:
                backbone:
                    type: 'EfficientNet'
                    variant: 'efficientnet-b5'
                    n_channels: 4
                head:
                    type: 'FPNDecodeHead'
                    num_classes: 1 
    CCD_24:
        MODEL: 'FPN'
        MODEL_PARAMS:
            cfg:
                backbone:
                    type: 'EfficientNet'
                    variant: 'efficientnet-b3'
                    n_channels: 4
                head:
                    type: 'FPNDecodeHead'
                    num_classes: 1
    CCD_25:
        MODEL: 'Unet'
        MODEL_PARAMS:
            cfg:
                backbone:
                    type: 'EfficientNet' 
                    variant: 'efficientnet-b5' 
                    n_channels: 4
                head:
                    type: 'UnetDecodeHead'
                    n_classes: 1
                    dropout: 0.2
                    out_channels: [256, 128, 64, 32, 16]
    
FT_OPTIMIZER_CFG: 
    type: 'AdamW' # Should be one of the algorithms in https://pytorch.org/docs/stable/optim.html
    lr: 1.0e-5
    betas: [0.9, 0.999]
    weight_decay: 0.01
FT_EPOCHS: 1
FT_ENSEMBLER: 'Ensembler'

# Wandb 
USE_WANDB: True

# Outputs
OUTPUT_PATH: 'outputs/'
